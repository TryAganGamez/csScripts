using UnityEngine;
using UnityStandardAssets.CrossPlatformInput;

    public class playerControl : MonoBehaviour{
    
        private bool m_AirControl = false;                 // Whether or not a player can steer while jumping;
        private LayerMask m_WhatIsGround;                  // A mask determining what is ground to the character

        private Transform m_GroundCheck;    // A position marking where to check if the player is grounded.
        const float k_GroundedRadius = .2f; // Radius of the overlap circle to determine if grounded
        private bool m_Grounded;            // Whether or not the player is grounded.
        private Transform m_CeilingCheck;   // A position marking where to check for ceilings
        const float k_CeilingRadius = .01f; // Radius of the overlap circle to determine if the player can stand up
        private Animator m_Anim;            // Reference to the player's animator component.
        private Rigidbody2D m_Rigidbody2D;
        private bool jump;
        bool doubleJump=false;
        private float m_MaxSpeed = 10f;                    // The fastest the player can travel in the x axis.
        private float m_JumpForce = 400f;       

        private void Awake(){
            // Setting up references.
            m_GroundCheck = transform.Find("GroundCheck");
            m_CeilingCheck = transform.Find("CeilingCheck");
            m_Anim = GetComponent<Animator>();
            m_Rigidbody2D = GetComponent<Rigidbody2D>();
        }

        private void Update(){
            if (!jump)
            {
                // Read the jump input in Update so button presses aren't missed.
                jump = CrossPlatformInputManager.GetButtonDown("Jump");
            }
        }


        private void FixedUpdate(){
        
            m_Grounded = false;
            Move(1, false, m_Jump);
            jump = false;
            // The player is grounded if a circlecast to the groundcheck position hits anything designated as ground
            // This can be done using layers instead but Sample Assets will not overwrite your project settings.
            Collider2D[] colliders = Physics2D.OverlapCircleAll(m_GroundCheck.position, k_GroundedRadius, m_WhatIsGround);
            for (int i = 0; i < colliders.Length; i++){
                if (colliders[i].gameObject != gameObject)
                m_Grounded = true;
            }
            m_Anim.SetBool("Ground", m_Grounded);

            // Set the vertical animation
            m_Anim.SetFloat("vSpeed", m_Rigidbody2D.velocity.y);

			if (m_Grounded)
				doubleJump = false;
        }
     }

  public void Move(float move, bool crouch, bool jump){
           
            //only control the player if grounded or airControl is turned on
            if (m_Grounded || m_AirControl){
                
                // Move the character
                m_Rigidbody2D.velocity = new Vector2(move*m_MaxSpeed, m_Rigidbody2D.velocity.y);

            }
            
            // If the player should jump...
			if ((m_Grounded || !doubleJump) && jump)
            {
                // Add a vertical force to the player.
           
				m_Rigidbody2D.velocity = new Vector2 (m_Rigidbody2D.velocity.x, 0);
                m_Anim.SetBool("Ground", false);
            //    m_Rigidbody2D.AddForce(new Vector2(0f, m_JumpForce));

				if (!m_Grounded)
					doubleJump = true;
            }
        }
    }
